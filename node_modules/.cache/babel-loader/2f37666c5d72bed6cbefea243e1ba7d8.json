{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { useEffect, useState } from \"react\";\n\nfunction useTOCHighlight(linkClassName, linkActiveClassName, topOffset) {\n  const [lastActiveLink, setLastActiveLink] = useState(undefined);\n  useEffect(() => {\n    function setActiveLink() {\n      function getActiveHeaderAnchor() {\n        const headersAnchors = Array.from(document.getElementsByClassName(\"anchor\"));\n        console.log(headersAnchors);\n        const firstAnchorUnderViewportTop = headersAnchors.find(anchor => {\n          const {\n            top\n          } = anchor.getBoundingClientRect();\n          return top >= topOffset;\n        });\n\n        if (firstAnchorUnderViewportTop) {\n          // If first anchor in viewport is under a certain threshold, we consider it's not the active anchor.\n          // In such case, the active anchor is the previous one (if it exists), that may be above the viewport\n          if (firstAnchorUnderViewportTop.getBoundingClientRect().top >= topOffset) {\n            const previousAnchor = headersAnchors[headersAnchors.indexOf(firstAnchorUnderViewportTop) - 1];\n            return previousAnchor !== null && previousAnchor !== void 0 ? previousAnchor : firstAnchorUnderViewportTop;\n          } // If the anchor is at the top of the viewport, we consider it's the first anchor\n          else {\n              return firstAnchorUnderViewportTop;\n            }\n        } // no anchor under viewport top? (ie we are at the bottom of the page)\n        else {\n            // highlight the last anchor found\n            return headersAnchors[headersAnchors.length - 1];\n          }\n      }\n\n      const activeHeaderAnchor = getActiveHeaderAnchor();\n\n      if (activeHeaderAnchor) {\n        let index = 0;\n        let itemHighlighted = false; // @ts-ignore\n\n        const links = document.getElementsByClassName(linkClassName);\n\n        while (index < links.length && !itemHighlighted) {\n          const link = links[index]; // @ts-ignore\n\n          const {\n            href\n          } = link;\n          const anchorValue = decodeURIComponent(href.substring(href.indexOf(\"#\") + 1));\n\n          if (activeHeaderAnchor.id === anchorValue) {\n            if (lastActiveLink) {\n              lastActiveLink.classList.remove(linkActiveClassName);\n            }\n\n            link.classList.add(linkActiveClassName); // @ts-ignore\n\n            setLastActiveLink(link);\n            itemHighlighted = true;\n          }\n\n          index += 1;\n        }\n      }\n    }\n\n    document.addEventListener(\"scroll\", setActiveLink);\n    document.addEventListener(\"resize\", setActiveLink);\n    console.log(\"Listening\");\n    setActiveLink();\n    return () => {\n      console.log(\"Removed\");\n      document.removeEventListener(\"scroll\", setActiveLink);\n      document.removeEventListener(\"resize\", setActiveLink);\n    };\n  });\n}\n\nexport default useTOCHighlight;","map":{"version":3,"sources":["/Users/kallior/Desktop/porto/src/useTOCHighlight.tsx"],"names":["useEffect","useState","useTOCHighlight","linkClassName","linkActiveClassName","topOffset","lastActiveLink","setLastActiveLink","undefined","setActiveLink","getActiveHeaderAnchor","headersAnchors","Array","from","document","getElementsByClassName","console","log","firstAnchorUnderViewportTop","find","anchor","top","getBoundingClientRect","previousAnchor","indexOf","length","activeHeaderAnchor","index","itemHighlighted","links","link","href","anchorValue","decodeURIComponent","substring","id","classList","remove","add","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { useEffect, useState } from \"react\";\n\nfunction useTOCHighlight(\n  linkClassName: string,\n  linkActiveClassName: string,\n  topOffset: number\n): void {\n  const [lastActiveLink, setLastActiveLink] = useState<HTMLAnchorElement>(\n    undefined!\n  );\n\n  useEffect(() => {\n    function setActiveLink() {\n      function getActiveHeaderAnchor(): Element | null {\n        const headersAnchors: Element[] = Array.from(\n          document.getElementsByClassName(\"anchor\")\n        );\n\n        console.log(headersAnchors);\n\n        const firstAnchorUnderViewportTop = headersAnchors.find((anchor) => {\n          const { top } = anchor.getBoundingClientRect();\n          return top >= topOffset;\n        });\n\n        if (firstAnchorUnderViewportTop) {\n          // If first anchor in viewport is under a certain threshold, we consider it's not the active anchor.\n          // In such case, the active anchor is the previous one (if it exists), that may be above the viewport\n          if (\n            firstAnchorUnderViewportTop.getBoundingClientRect().top >= topOffset\n          ) {\n            const previousAnchor =\n              headersAnchors[\n                headersAnchors.indexOf(firstAnchorUnderViewportTop) - 1\n              ];\n            return previousAnchor ?? firstAnchorUnderViewportTop;\n          }\n          // If the anchor is at the top of the viewport, we consider it's the first anchor\n          else {\n            return firstAnchorUnderViewportTop;\n          }\n        }\n        // no anchor under viewport top? (ie we are at the bottom of the page)\n        else {\n          // highlight the last anchor found\n          return headersAnchors[headersAnchors.length - 1];\n        }\n      }\n\n      const activeHeaderAnchor = getActiveHeaderAnchor();\n\n      if (activeHeaderAnchor) {\n        let index = 0;\n        let itemHighlighted = false;\n\n        // @ts-ignore\n        const links = document.getElementsByClassName(linkClassName);\n        while (index < links.length && !itemHighlighted) {\n          const link = links[index];\n          // @ts-ignore\n          const { href } = link;\n          const anchorValue = decodeURIComponent(\n            href.substring(href.indexOf(\"#\") + 1)\n          );\n\n          if (activeHeaderAnchor.id === anchorValue) {\n            if (lastActiveLink) {\n              lastActiveLink.classList.remove(linkActiveClassName);\n            }\n            link.classList.add(linkActiveClassName);\n            // @ts-ignore\n            setLastActiveLink(link);\n            itemHighlighted = true;\n          }\n\n          index += 1;\n        }\n      }\n    }\n\n    document.addEventListener(\"scroll\", setActiveLink);\n    document.addEventListener(\"resize\", setActiveLink);\n\n    console.log(\"Listening\");\n\n    setActiveLink();\n\n    return () => {\n      console.log(\"Removed\");\n      document.removeEventListener(\"scroll\", setActiveLink);\n      document.removeEventListener(\"resize\", setActiveLink);\n    };\n  });\n}\n\nexport default useTOCHighlight;\n"]},"metadata":{},"sourceType":"module"}